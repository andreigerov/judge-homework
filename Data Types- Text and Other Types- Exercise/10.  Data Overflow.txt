using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Data_Overflow
{
    class Program
    {
        static void Main(string[] args)
        {
            ulong number1 = ulong.Parse(Console.ReadLine());
            ulong number2 = ulong.Parse(Console.ReadLine());

            ulong biggerNum = Math.Max(number1, number2);
            ulong smallerNum = Math.Min(number1, number2);

            string bigType = "";
            string smallType = "";
            ulong smallNumType = 1;

            if (byte.MinValue <= biggerNum && biggerNum <= byte.MaxValue)
            {
                bigType = "byte";
            }
            else if (ushort.MinValue <= biggerNum && biggerNum <= ushort.MaxValue)
            {
                bigType = "ushort";
            }
            else if (uint.MinValue <= biggerNum && biggerNum <= uint.MaxValue)
            {
                bigType = "uint";
            }
            else if (ulong.MinValue <= biggerNum && biggerNum <= ulong.MaxValue)
            {
                bigType = "ulong";
            }


            if (byte.MinValue <= smallerNum && smallerNum <= byte.MaxValue)
            {
                smallNumType = byte.MaxValue;
                smallType = "byte";
            }
            else if (ushort.MinValue <= smallerNum && smallerNum <= ushort.MaxValue)
            {
                smallNumType = ushort.MaxValue;
                smallType = "ushort";
            }
            else if (uint.MinValue <= smallerNum && smallerNum <= uint.MaxValue)
            {
                smallNumType = uint.MaxValue;
                smallType = "uint";
            }
            else if (ulong.MinValue <= smallerNum && smallerNum <= ulong.MaxValue)
            {
                smallNumType = ulong.MaxValue;
                smallType = "ulong";
            }

            Console.WriteLine($"bigger type: {bigType}");
            Console.WriteLine($"smaller type: {smallType}");
            Console.WriteLine($"{biggerNum} can overflow {smallType} {Math.Round((double)biggerNum / smallNumType)} times");
        }
    }
}